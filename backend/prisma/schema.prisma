// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  password  String
  avatarURL String?

  // Chat
  rooms            UserOnRoom[]
  sentMessages     DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")

  // Friendship
  friends   User[] @relation("Friendship")
  friendsOf User[] @relation("Friendship")

  // FriendRequest
  requestedBy User[] @relation("FriendRequest")
  requesting  User[] @relation("FriendRequest")

  // Block
  blockedBy User[] @relation("BlockUser")
  blocking  User[] @relation("BlockUser")

  // Match History
  history MatchDetail[]

  // 2FA
  twoFactorSecret  String?
  twoFactorEnabled Boolean @default(false)
}

model Room {
  id    Int          @id @default(autoincrement())
  name  String
  users UserOnRoom[]
}

model UserOnRoom {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @default(MEMBER)
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int

  @@unique(fields: [userId, roomId], name: "userId_roomId_unique")
}

enum Role {
  OWNER
  ADMINISTRATOR
  MEMBER
}

model DirectMessage {
  id      Int    @id @default(autoincrement())
  content String

  senderId   Int
  sender     User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId Int
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Match {
  id Int @id @default(autoincrement())

  players MatchDetail[]

  result    MatchResultType
  createdAt DateTime        @default(now())
}

enum MatchResultType {
  COMPLETE
  INCOMPLETE
}

model MatchDetail {
  id Int @id @default(autoincrement())

  matchId Int
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  score  Int

  winLose WinLose

  createdAt DateTime @default(now())
}

enum WinLose {
  WIN
  LOSE
}
